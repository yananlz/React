{"version":3,"sources":["components/List.js","components/Input.js","components/TodoList.js","serviceWorker.js","index.js"],"names":["List","arr1","this","props","todos","filter","item","done","length","renderTodos","style","color","Component","Input","htmlFor","id","value","inpValue","type","onChange","handleChange","onClick","addTodo","TodoList","e","setState","target","state","title","delTodo","idx","index","toggle","newTodos","JSON","parse","stringify","map","todo","checked","dangerouslySetInnerHTML","__html","localStorage","getItem","setItem","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAoBeA,E,uKAhBP,IAAIC,EAAOC,KAAKC,MAAMC,MAAMC,QAAQ,SAAAC,GAAI,OAAKA,EAAKC,QAClD,OACI,6BACI,uDAASN,EAAKO,QACd,4BACKN,KAAKC,MAAMM,aAAY,IAE5B,wDACA,wBAAIC,MAAO,CAACC,MAAgB,UACvBT,KAAKC,MAAMM,aAAY,S,GAXxBG,aCiBLC,E,uKAhBX,OACE,6BACI,2BAAOC,QAAQ,OAAf,YACM,2BACIC,GAAG,MAEHC,MAAOd,KAAKC,MAAMc,SAClBC,KAAK,OACLC,SAAUjB,KAAKC,MAAMiB,eAEzB,4BAAQC,QAASnB,KAAKC,MAAMmB,SAA5B,qB,GAZKV,aC2GNW,E,kDApGX,aAAc,IAAD,8BACT,gBAMJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACR,SAASO,EAAEE,OAAOV,SARxB,EAyBbM,QAAU,WACkB,IAArB,EAAKK,MAAMV,WAGd,EAAKQ,SAAS,CACVrB,MAAM,CACF,CACIwB,MAAO,EAAKD,MAAMV,SAClBV,MAAM,IAHT,mBAKE,EAAKoB,MAAMvB,UAGtB,EAAKqB,SAAS,CAACR,SAAS,OAtCf,EAyCbY,QAAU,SAACC,GAIP,EAAKL,SAAS,CACVrB,MAAO,EAAKuB,MAAMvB,MAAMC,QAAO,SAACC,EAAKyB,GAAN,OAAcA,GAAOD,QA9C/C,EA0DbE,OAAS,SAACD,GACN,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKT,MAAMvB,QACpD6B,EAASF,GAAOxB,MAAQ0B,EAASF,GAAOxB,KACxC,EAAKkB,SAAS,CACVrB,MAAO6B,KA9DF,EAiEbxB,YAAc,SAACF,GACX,OAAO,EAAKoB,MAAMvB,MAAMiC,KAAI,SAACC,EAAKR,GAC9B,GAAGvB,GAAM+B,EAAK/B,KACV,OAAO,4BACH,2BACIc,QAAS,kBAAI,EAAKW,OAAOF,IACzBS,QAAShC,EACTW,KAAK,aAET,0BAAMsB,wBAAyB,CAACC,OAAOH,EAAKV,SAC5C,4BACIP,QAAS,kBAAI,EAAKQ,QAAQC,KAD9B,qBAzEZ,EAAKH,MAAQ,CACTV,SAAU,GACVb,MAAM,IAJD,E,gEAYT,IAAIA,EAAQsC,aAAaC,QAAQ,SAC9BvC,GACCF,KAAKuB,SAAS,CACVrB,MAAO8B,KAAKC,MAAM/B,O,2CAK1BsC,aAAaE,QACT,QACAV,KAAKE,UAAUlC,KAAKyB,MAAMvB,U,+BA8DxB,IAAD,EAEoBF,KAAKyB,MAAvBvB,EAFF,EAEEA,MAAMa,EAFR,EAEQA,SAGb,OACI,yBAAK4B,UAAU,OAEb,kBAAC,EAAD,CAAO5B,SAAUA,EAAUG,aAAclB,KAAKkB,aAAcE,QAASpB,KAAKoB,UAC1E,kBAAC,EAAD,CAAMb,YAAaP,KAAKO,YAAaL,MAAOA,S,GA9FnCQ,aCKHkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.77dcd86c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n class List extends Component {\r\n    render() {\r\n        let arr1 = this.props.todos.filter( item => !item.done);\r\n        return (\r\n            <div>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成</h2>\r\n                <ul style={{color:3<2?'red':'green'}}>\r\n                    {this.props.renderTodos(true)}\r\n                </ul>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default List;\r\n","import React, { Component } from 'react'\r\n class Input extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n          <label htmlFor=\"inp\">todolist</label>\r\n                <input \r\n                    id='inp'\r\n                    //ref={inp=>this.input = inp}\r\n                    value={this.props.inpValue} \r\n                    type=\"text\" \r\n                    onChange={this.props.handleChange}\r\n                />\r\n                <button onClick={this.props.addTodo}>添加</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from 'react';\r\n//import './control.css';\r\nimport List from \"./List\";\r\nimport Input from \"./Input\";\r\n\r\n\r\n// 组件名首字母一定要大写\r\nclass TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        // this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue==''){\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })\r\n        this.setState({inpValue:''})\r\n\r\n    }\r\n    delTodo = (idx)=>{\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        // newTodos.splice(idx,1);\r\n        // this.setState({todos:newTodos});\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        });\r\n        // setState 是异步执行的，注意callback的用法\r\n        // this.setState({\r\n        //     todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        // },()=>{\r\n        //     localStorage.setItem(\r\n        //         'todos',\r\n        //         JSON.stringify(this.state.todos)\r\n        //     )\r\n        // });\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick={()=>this.toggle(idx)}\r\n                        checked={done} \r\n                        type=\"checkbox\"\r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button \r\n                        onClick={()=>this.delTodo(idx)}\r\n                    >\r\n                        删除\r\n                    </button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        \r\n        const {todos,inpValue} = this.state;\r\n        \r\n        // console.log(arr1);\r\n        return (\r\n            <div className=\"box\">\r\n              \r\n              <Input inpValue={inpValue} handleChange={this.handleChange} addTodo={this.addTodo}/>\r\n              <List renderTodos={this.renderTodos} todos={todos}/>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from \"./components/TodoList\";\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <TodoList />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}